import { completeFromList } from '@codemirror/autocomplete'

export const globalCompletions = completeFromList([
    { "label": "undefined", "type": "variable", "info": "Primitive value" },
    { "label": "Infinity", "type": "variable", "info": "Special numeric value" },
    { "label": "NaN", "type": "variable", "info": "Not-a-Number value" },

    { label: 'break', type: 'keyword' },
    { label: 'case', type: 'keyword' },
    { label: 'catch', type: 'keyword' },
    { label: 'class', type: 'keyword' },
    { label: 'const', type: 'keyword' },
    { label: 'continue', type: 'keyword' },
    { label: 'debugger', type: 'keyword' },
    { label: 'default', type: 'keyword' },
    { label: 'delete', type: 'keyword' },
    { label: 'do', type: 'keyword' },
    { label: 'else', type: 'keyword' },
    { label: 'enum', type: 'keyword' },
    { label: 'export', type: 'keyword' },
    { label: 'extends', type: 'keyword' },
    { label: 'false', type: 'keyword' },
    { label: 'finally', type: 'keyword' },
    { label: 'for', type: 'keyword' },
    { label: 'function', type: 'keyword' },
    { label: 'if', type: 'keyword' },
    { label: 'import', type: 'keyword' },
    { label: 'in', type: 'keyword' },
    { label: 'instanceof', type: 'keyword' },
    { label: 'new', type: 'keyword' },
    { label: 'null', type: 'keyword' },
    { label: 'return', type: 'keyword' },
    { label: 'super', type: 'keyword' },
    { label: 'switch', type: 'keyword' },
    { label: 'this', type: 'keyword' },
    { label: 'throw', type: 'keyword' },
    { label: 'true', type: 'keyword' },
    { label: 'try', type: 'keyword' },
    { label: 'typeof', type: 'keyword' },
    { label: 'var', type: 'keyword' },
    { label: 'void', type: 'keyword' },
    { label: 'while', type: 'keyword' },
    { label: 'with', type: 'keyword' },
    { label: 'yield', type: 'keyword' },
    { label: 'await', type: 'keyword' },
    { label: 'let', type: 'keyword' },
    { label: 'async', type: 'keyword' },
    { label: 'implements', type: 'keyword' },
    { label: 'interface', type: 'keyword' },
    { label: 'package', type: 'keyword' },
    { label: 'private', type: 'keyword' },
    { label: 'protected', type: 'keyword' },
    { label: 'public', type: 'keyword' },
    { label: 'static', type: 'keyword' },

    { "label": "forEach", "type": "function", "info": "Iterate the elements of an array" },

    { "label": "isNaN", "type": "function", "info": "Check if a value is NaN" },
    { "label": "isFinite", "type": "function", "info": "Check if a value is a finite number" },
    { "label": "parseFloat", "type": "function", "info": "Parse a string to a floating-point number" },
    { "label": "parseInt", "type": "function", "info": "Parse a string to an integer" },
    { "label": "encodeURI", "type": "function", "info": "Encode a URI" },
    { "label": "encodeURIComponent", "type": "function", "info": "Encode a URI component" },
    { "label": "decodeURI", "type": "function", "info": "Decode a URI" },
    { "label": "decodeURIComponent", "type": "function", "info": "Decode a URI component" },
    { "label": "setTimeout", "type": "function", "info": "Call a function after a delay" },
    { "label": "clearTimeout", "type": "function", "info": "Clear a timeout" },
    { "label": "setInterval", "type": "function", "info": "Call a function repeatedly after a delay" },
    { "label": "clearInterval", "type": "function", "info": "Clear an interval" },

    { "label": "Object", "type": "class", "info": "Base object type" },
    { "label": "Function", "type": "class", "info": "Function constructor" },
    { "label": "Boolean", "type": "class", "info": "Boolean wrapper" },
    { "label": "Symbol", "type": "class", "info": "Symbol primitive type" },
    { "label": "Error", "type": "class", "info": "Generic error" },
    { "label": "EvalError", "type": "class", "info": "Eval error" },
    { "label": "RangeError", "type": "class", "info": "Out-of-range error" },
    { "label": "ReferenceError", "type": "class", "info": "Invalid reference error" },
    { "label": "SyntaxError", "type": "class", "info": "Syntax error" },
    { "label": "TypeError", "type": "class", "info": "Type mismatch error" },
    { "label": "URIError", "type": "class", "info": "Malformed URI error" },
    { "label": "Number", "type": "class", "info": "Number wrapper" },
    { "label": "BigInt", "type": "class", "info": "Arbitrary-precision integers" },
    { "label": "String", "type": "class", "info": "String wrapper" },
    { "label": "Array", "type": "class", "info": "Array wrapper" },
    { "label": "Map", "type": "class", "info": "Key-value map" },
    { "label": "Set", "type": "class", "info": "Unique value set" },
    { "label": "WeakMap", "type": "class", "info": "Weak key-value map" },
    { "label": "WeakSet", "type": "class", "info": "Weak value set" },
    { "label": "Date", "type": "class", "info": "Date and time" },
    { "label": "RegExp", "type": "class", "info": "Regular expression" },
    { "label": "Promise", "type": "class", "info": "Asynchronous operation" },
    { "label": "Math", "type": "variable", "info": "Math utilities" },
    { "label": "JSON", "type": "variable", "info": "JSON utilities" },
    { "label": "console", "type": "variable", "info": "Console logging interface" },
    { "label": 'log', "type": 'function', "info": 'Print something on the console' },
    { "label": 'error', "type": 'function', "info": 'Print an error on the console' },
    { "label": 'warning', "type": 'function', "info": 'Print a warning on the console' },
    { "label": "Intl", "type": "variable", "info": "Internationalization API" },
    { "label": "Reflect", "type": "variable", "info": "Reflection API" },
    { "label": "Proxy", "type": "class", "info": "Proxy object for customization" },
    { "label": "ArrayBuffer", "type": "class", "info": "Raw binary data buffer" },
    { "label": "Uint8Array", "type": "class", "info": "Typed array" },
    { "label": "Int8Array", "type": "class", "info": "Typed array" },
    { "label": "Uint16Array", "type": "class", "info": "Typed array" },
    { "label": "Int16Array", "type": "class", "info": "Typed array" },
    { "label": "Uint32Array", "type": "class", "info": "Typed array" },
    { "label": "Int32Array", "type": "class", "info": "Typed array" },
    { "label": "Float32Array", "type": "class", "info": "Typed array" },
    { "label": "Float64Array", "type": "class", "info": "Typed array" },
    { "label": "DataView", "type": "class", "info": "Low-level binary data view" },
    { "label": "BigInt64Array", "type": "class", "info": "Typed array" },
    { "label": "BigUint64Array", "type": "class", "info": "Typed array" }
])